**************** O que é Orientação a Objetos? **********************
- O Objeto é uma instância de uma classe.

**************** OO X Mundo Real *********************
- Uma classe Carro representa todos os carros do Mundo
- Porém cada Carro distingue do outro, sendo assim eles são Objetos
- Tendo características(propriedades) e funcionalidades próprias(métodos)
- O Carro pode ter 4 ou 2 portas(propriedades)
- Podemos acelerar ou frear com o Carro(métodos)
  [propriedades = características] - [métodos = ações]

**************** Objetos **************************
 # O que é um Objeto?
 - Um tipo de dado que possui duas características
   PROPRIEDADES = características do Objeto
   MÉTODOS = ações do objeto

*************** Propriedades ***************
- As propriedades são as características dos objetos;
- Por ex: cor, portas, nome, marca e etc;
- Podemos iniciar um objeto com várias propriedades;
- E acessá-las para resgatar os seus valores;

*************** Tipos de dados e Propriedades ***********
- As propriedades aceitam qualquer tipo de dados do javascript;
- Booleanos, numbers, strings e arrays

*************** Acessando a Propriedade por Variável ***********
- Podemos acessar uma propriedade por meio de uma variável;
- É importante que a variável contenha o texto da propriedade;

************** Métodos ********************
- Os Métodos são as ações dos objetos;
- Os Métodos podem realizar qualquer operação que uma função realiza;

************* This ************************
- A palavra reservada this dentro de um objeto, vai se referir a própria instância;
- Podemos utilizar para resgastar as propriedades de um método;

************* Functions *******************
- Uma outra forma de criar objeto é pelo constructor function;
- Uma grande vantagem, é que este método aceita parâmetros para o obj;

************* Funções que retornam Objetos **************
- Parecida com as constructor functions, porém não precisamos utilizar o new;
- O objeto é criado com o retorno da função;

************* Passando Referência de Objeto ***************
- Quando você atribui um obj já criado para uma outra variável, você só está passando uma referência;
- Se alterar a referência, o original também é alterado;

************* A propriedade constructor ******************
- Quando um objeto é criado, sempre uma propriedade constructor é adicionada a ele;
- Contendo a referência de como o objeto foi criado;

Construtor: Um construtor é uma função que inicializa um objeto. Em JavaScript, os construtores são mais semelhantes ao construtor java normal.

Construtor de objeto: No JavaScript, há uma função especial de construtor conhecida como Object () que é usada para criar e inicializar um objeto. O valor de retorno do construtor Object () é atribuído a uma variável. A variável contém uma referência ao novo objeto. Precisamos de um construtor de objetos para criar um "tipo" de objeto que possa ser usado várias vezes sem redefinir o objeto todas as vezes.

Exemplo:

função GFG (A, B, C) {
    this.g = A;
    this.f = B;
    this.gg = C;
}
Aqui, GFG é o nome do construtor e A, B, C são os argumentos do construtor.

Instanciando um Construtor de Objetos: Existem duas maneiras de instanciar um construtor de objetos,

1. var object_name = new Object (); ou  
   var object_name = new Object ("java", "JavaScript", "C #");
2. var object_name = {};
No 1º método, o objeto é criado usando uma nova palavra-chave, como linguagens OOP normais, e “Java”, “JavaScript”, “C #” são os argumentos passados ​​quando o construtor é chamado.
No segundo método, o objeto é criado usando chaves "{}" .


************* Comparando Objetos ************************
- Você só consegue ter objetos iguais, criando uma referência;
- Objetos criados a partir de um construtor, sempre serão diferentes;

************* Object Literals ************************
- Função do ES6 que permite criar objetos mais rapidamente;
- Utilizando nomes de variaveis para nomes de propriedades;

************* Copiando Propriedades ************
- Os Obj herdam métodos do obj pai Object, e podemos utilizá-los;
- Para copiar propriedades utilizamos o método assign

************* Comparando Objetos *****************
- Podemos comparar os objetos com o método is 
- Teremos basicamente os mesmos resultados de ===
- Salvo para NaN com NaN e +0 com -0 que neste método são considerados como iguais

************* Destructuring ******************
- Veio do ES6
- Podemos criar várias variáveis com uma linha só, desestruturando um objeto;
- Mudar valor de var já criadas
- Funciona com Arrays

******* Objetos **********
- A representação de uma classe;
- Fundamental para a Objetos- Tem propriedades que representam as caracteristicas de um objeto;
- Tem métodos que representam as ações de um objeto

******** Classes ***********
- É como se fosse o molde do objeto;
- Geralmente se criam diversos objetos da mesma classe;
- Normalmente já possui as propriedades e metodos que os objetos vão utilizar;
- A classe no JS foi introduzida na versão ES6

******** Encapsulamento ***********
- Quando um Objeto contém ou encapsula dados ou meios de fazer algo com os dados (usando métodos);
- Um outro aspecto da encapsulação é ter propriedades e métodos públicos, privados ou protegidos;

******** Herança **************
- Quando um objeto ou classe deriva de uma outra classe;
- Podendo herdar suas propriedades e métodos;
- Fazendo com que você crie classes com o comportamento semelhante, porém para fins distintos

******** Polimorfismo *********
- É a possibilidade de utilizar um método de uma classe pai de uma maneira diferente;
- Que se adapte as necessidades de novo objeto, sem precisar alterar o método do objeto pai;
- Importante citar que o polimorfismo utiliza o conceito de herança;